name: Maven Release

on:
  workflow_dispatch:
    inputs:
      next-release-version:
        description: 'Next Release Version'
      next-snapshot-version:
        description: 'Next Snapshot Version'

env:
  DEPLOY_USERNAME: ${{ secrets.maven_central_actor }}
  DEPLOY_PASSWORD: ${{ secrets.maven_central_token }}
  GPG_PASSPHRASE: ${{ secrets.maven_gpg_passphrase }}

jobs:
  release:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          settings-path: ${{ github.workspace }}
          distribution: 'temurin'
          java-version: '8'
          server-id: central
          server-username: DEPLOY_USERNAME
          server-password: DEPLOY_PASSWORD
          gpg-passphrase: GPG_PASSPHRASE
          gpg-private-key: ${{ secrets.maven_gpg_private_key }}

      - shell: bash
        env:
          GIT_RELEASE_BOT_NAME: 'github-actions[bot]'
          GIT_RELEASE_BOT_EMAIL: '41898282+github-actions[bot]@users.noreply.github.com'
        # language="shell script"
        run: |
          [ -z "$(git config --get user.name)" ] && git config --local user.name "${GIT_RELEASE_BOT_NAME}"
          [ -z "$(git config --get user.email)" ] && git config  --local user.email "${GIT_RELEASE_BOT_EMAIL}"

      - uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.8

      - name: Copy Version Info
        id: copy-version
        shell: bash
        # language="shell script"
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
          echo "version=$version" >> $GITHUB_OUTPUT

      - shell: bash
        id: exec-maven-release
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
          NEXT_REL_VERSION: ${{ inputs.next-release-version }}
          NEXT_DEV_VERSION: ${{ inputs.next-snapshot-version }}
          RELEASE_GOAL_PREFIX: 'org.apache.maven.plugins:maven-release-plugin:3.1.1'
        # language="shell script"
        run: |
          declare -a mvnArgsArr=( "-B" )
          if [ -n "${NEXT_REL_VERSION}" ] ; then
            mvnArgsArr+=( "-DreleaseVersion=${RELEASE_VERSION}" )
          fi
          if [ -n "${NEXT_DEV_VERSION}" ] ; then
            mvnArgsArr+=( "-DdevelopmentVersion=${DEVELOPMENT_VERSION}" )
          fi
          mvnArgsArr+=( "--no-transfer-progress" )
          mvnArgsArr+=( "-DpushChanges=false" )
          mvnArgsArr+=( "-DlocalCheckout=true" )
          mvnArgsArr+=( "-DscmCommentPrefix=[GitHub] " )
          mvnArgsArr+=( "-DtagNameFormat=@{project.version}" )
          mvnArgsArr+=( "-DpreparationProfiles=release" )
          mvnArgsArr+=( "-DreleaseProfiles=release" )
          mvnArgsArr+=( "-Darguments=--no-transfer-progress" )
          mvnArgsArr+=( "--no-transfer-progress" )
          mvnArgsArr+=( "-s" "${GITHUB_WORKSPACE}/settings.xml" )
          mvn "${mvnArgsArr[@]}" $RELEASE_GOAL_PREFIX:prepare $RELEASE_GOAL_PREFIX:perform

      - name: Commit Maven Release
        if: ${{ success() }}
        run: git push --follow-tags --atomic
